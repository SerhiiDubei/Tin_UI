// backend/src/utils/metadata_utils.js - ES Modules –≤–µ—Ä—Å—ñ—è

import axios from 'axios';
import probe from 'probe-image-size';

/**
 * –û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è image URL
 * @param {string} url - URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Promise<Object>} - { width, height, mime, size_bytes }
 */
export async function getImageMetadata(url) {
  try {
    console.log('üîç –ê–Ω–∞–ª—ñ–∑—É—é image:', url);

    // 1. –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ probe-image-size (—à–≤–∏–¥–∫–æ, –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
    const dimensions = await probe(url);

    // 2. –û—Ç—Ä–∏–º—É—î–º–æ size —á–µ—Ä–µ–∑ HEAD request
    const headResponse = await axios.head(url, { timeout: 5000 });
    const sizeBytes = parseInt(headResponse.headers['content-length']) || null;

    return {
      width: dimensions.width,
      height: dimensions.height,
      mime: dimensions.mime || 'image/png',
      size_bytes: sizeBytes
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ image metadata:', error.message);
    // Fallback - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ö–æ—á–∞ –± MIME type
    return {
      width: null,
      height: null,
      mime: guessMimeFromUrl(url),
      size_bytes: null
    };
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è video URL
 * @param {string} url - URL –≤—ñ–¥–µ–æ
 * @returns {Promise<Object>} - { width, height, duration, mime, size_bytes, poster_url }
 */
export async function getVideoMetadata(url) {
  try {
    console.log('üîç –ê–Ω–∞–ª—ñ–∑—É—é video:', url);

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
    const headResponse = await axios.head(url, { timeout: 5000 });
    const sizeBytes = parseInt(headResponse.headers['content-length']) || null;

    // –î–ª—è –≤—ñ–¥–µ–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—á–Ω—ñ
    // (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ñ–∞–π–ª —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ ffprobe)
    return {
      width: 1024, // default –¥–ª—è LTX Video
      height: 576, // default –¥–ª—è LTX Video
      duration: null, // –∑–∞–ø–æ–≤–Ω–∏—Ç—å—Å—è –∑ generation_params
      mime: 'video/mp4',
      size_bytes: sizeBytes,
      poster_url: null // –º–æ–∂–Ω–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ Replicate –∞–±–æ Cloudinary
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ video metadata:', error.message);
    return {
      width: 1024,
      height: 576,
      duration: null,
      mime: 'video/mp4',
      size_bytes: null,
      poster_url: null
    };
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è audio URL
 * @param {string} url - URL –∞—É–¥—ñ–æ
 * @returns {Promise<Object>} - { duration, mime, size_bytes }
 */
export async function getAudioMetadata(url) {
  try {
    console.log('üîç –ê–Ω–∞–ª—ñ–∑—É—é audio:', url);

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
    const headResponse = await axios.head(url, { timeout: 5000 });
    const sizeBytes = parseInt(headResponse.headers['content-length']) || null;

    return {
      duration: null, // –∑–∞–ø–æ–≤–Ω–∏—Ç—å—Å—è –∑ generation_params
      mime: guessMimeFromUrl(url, 'audio'),
      size_bytes: sizeBytes
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ audio metadata:', error.message);
    return {
      duration: null,
      mime: 'audio/mpeg',
      size_bytes: null
    };
  }
}

/**
 * –í–∏–∑–Ω–∞—á–∞—î MIME type –∑ URL
 */
export function guessMimeFromUrl(url, defaultType = 'image') {
  const lowerUrl = url.toLowerCase();

  // Images
  if (lowerUrl.includes('.png')) return 'image/png';
  if (lowerUrl.includes('.jpg') || lowerUrl.includes('.jpeg')) return 'image/jpeg';
  if (lowerUrl.includes('.webp')) return 'image/webp';
  if (lowerUrl.includes('.gif')) return 'image/gif';

  // Videos
  if (lowerUrl.includes('.mp4')) return 'video/mp4';
  if (lowerUrl.includes('.webm')) return 'video/webm';
  if (lowerUrl.includes('.mov')) return 'video/quicktime';

  // Audio
  if (lowerUrl.includes('.mp3')) return 'audio/mpeg';
  if (lowerUrl.includes('.wav')) return 'audio/wav';
  if (lowerUrl.includes('.ogg')) return 'audio/ogg';
  if (lowerUrl.includes('.m4a')) return 'audio/mp4';

  // Defaults
  if (defaultType === 'image') return 'image/png';
  if (defaultType === 'video') return 'video/mp4';
  if (defaultType === 'audio') return 'audio/mpeg';

  return 'application/octet-stream';
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π description –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç—É —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
 */
export function generateDescription(prompt, params, model) {
  const parts = [prompt];

  if (params.aspect_ratio) {
    parts.push(`Aspect ratio: ${params.aspect_ratio}`);
  }

  if (params.num_inference_steps) {
    parts.push(`Steps: ${params.num_inference_steps}`);
  }

  if (params.guidance_scale) {
    parts.push(`Guidance: ${params.guidance_scale}`);
  }

  if (params.num_frames) {
    parts.push(`Frames: ${params.num_frames}`);
  }

  if (params.duration) {
    parts.push(`Duration: ${params.duration}s`);
  }

  if (model) {
    const modelName = model.split('/').pop().split(':')[0];
    parts.push(`Model: ${modelName}`);
  }

  return parts.join(' | ');
}

/**
 * –°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–∏–π –æ–±'—î–∫—Ç generation_params
 */
export function buildGenerationParams(inputParams, modelConfig) {
  return {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ input
    ...inputParams,
    
    // –î–æ–¥–∞—î–º–æ model info
    model_version: modelConfig.model,
    model_name: modelConfig.name || modelConfig.model.split('/')[1],
    
    // Timestamp –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    generated_at: new Date().toISOString(),
    
    // Replicate metadata (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ)
    replicate_version: modelConfig.model.split(':')[1] || 'latest'
  };
}
